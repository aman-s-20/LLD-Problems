**Requirements**

1. The system should allow users to create accounts and manage their profile information.
2. Users should be able to create groups and add other users to the groups.
3. Users should be able to add expenses within a group, specifying the amount, description, and participants.
4. The system should automatically split the expenses among the participants based on their share.
5. Users should be able to view their individual balances with other users and settle up the balances.
6. The system should support different split methods, such as equal split, percentage split, and exact amounts.
7. Users should be able to view their transaction history and group expenses.
8. The system should handle concurrent transactions and ensure data consistency.


ref: https://github.com/aman-s-20/awesome-low-level-design/blob/main/problems/splitwise.md


--------------------------------------------------------------------------------------------------
Class Diagram:

User
BalanceSheetManager
Expense
Group
Balance
SplitStrategy



--------------------------------------------------------------------------------------------------
Ques?: how would you make sure concurrency and data consistency?
Ans:
  - By putting syncronized keyword on updateBalance function.
    cons: bottleneck on update balance
  - By making Database Transactions (@Transactional in springboot)
    For a real application, the balance sheet wouldn't be a Java Map;
    it would be stored in a database. The best way to ensure data consistency is to wrap
    the entire operation in a database transaction.

--------------------------------------------------------------------------------------------------

Scope of Improvement

1. We could have used builder pattern for object creation
2. We could have used Factory pattern for expense object creation (createEqualExpense/createPercentageExpense)



